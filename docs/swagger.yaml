openapi: "3.0.0"
info:
  title: "RESTful API"
  description: "Документация для API"
  version: "1.0.0"
servers:
  - url: "http://localhost:85"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    AuthHeader:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
      description: "Bearer токен для авторизации"
  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
          example: "1"
        authorId:
          type: string
          example: "123"
        text:
          type: string
          example: "This is a new post."
        date:
          type: string
          example: "2023-11-15T10:00:00Z"
    Pagination:
      type: object
      properties:
        pageIndex:
          type: integer
          example: 1
        recordsPerPage:
          type: integer
          example: 10
        totalRecords:
          type: integer
          example: 100
    GetPostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        pagination:
          $ref: '#/components/schemas/Pagination'
security:
  - BearerAuth: []
paths:
  /auth/registration/:
    post:
      summary: "Регистрация пользователя"
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "testuser"
                password:
                  type: string
                  example: "strongpassword"
      responses:
        "201":
          description: "Пользователь успешно зарегистрирован"
        "500":
          description: "Ошибка при регистрации пользователя"

  /auth/login/:
    post:
      summary: "Аутентификация пользователя"
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "testuser"
                password:
                  type: string
                  example: "strongpassword"
      responses:
        "200":
          description: "Успешный вход"
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR..."
        "401":
          description: "Неверные учетные данные"

  /auth/refresh/:
    post:
      summary: "Обновление токена"
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "refresh_token_value"
      responses:
        "200":
          description: "Новый токен выдан"
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR..."
        "401":
          description: "Ошибка обновления access_token"

  /users/:
    get:
      summary: "Получение информации о пользователе"
      tags:
        - "users"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      responses:
        "200":
          description: "Информация о пользователе"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123"
                  username:
                    type: string
                    example: "testuser"
        "500":
          description: "Ошибка получения пользователя"

  /posts/:
    get:
      summary: "Получение списка постов"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      tags:
        - "posts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
      responses:
        "200":
          description: "Список постов"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostsResponse'
        "500":
          description: "Ошибка получения постов"
    
    post:
      summary: "Создание нового поста"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      tags:
        - "posts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "This is a new post."
      responses:
        "200":
          description: "Пост успешно создан"
        "500":
          description: "Ошибка создания поста"

  /posts/{id}/:
    put:
      summary: "Обновление поста"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "ID поста для обновления"
      tags:
        - "posts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "Updated post content"
      responses:
        "200":
          description: "Пост успешно обновлен"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required fields"
        "500":
          description: "Ошибка обновления поста"

    delete:
      summary: "Удаление поста"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "ID поста для удаления"
      tags:
        - "posts"
      responses:
        "200":
          description: "Пост успешно удален"
        "500":
          description: "Ошибка удаления поста"