openapi: "3.0.0"
info:
  title: "RESTful API"
  description: "Документация для API"
  version: "1.0.0"
servers:
  - url: "http://localhost:85"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    AuthHeader:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
      description: "Bearer токен для авторизации"
security:
  - BearerAuth: []
paths:
  /auth/registration/:
    post:
      summary: "Регистрация пользователя"
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "testuser"
                password:
                  type: string
                  example: "strongpassword"
      responses:
        "201":
          description: "Пользователь успешно зарегистрирован"
        "500":
          description: "Ошибка сервера при регистрации пользователя"

  /auth/login/:
    post:
      summary: "Аутентификация пользователя"
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "testuser"
                password:
                  type: string
                  example: "strongpassword"
      responses:
        "200":
          description: "Успешный вход"
        "401":
          description: "Неверные учетные данные"

  /auth/refresh/:
    post:
      summary: "Обновление токена"
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: "refresh_token_value"
      responses:
        "200":
          description: "Новый токен выдан"
        "401":
          description: "Неверный или истекший refresh_token"

  /auth/logout/:
    post:
      summary: "Выход из системы"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      tags:
        - "auth"
      responses:
        "200":
          description: "Успешный выход"
        "500":
          description: "Ошибка сервера при выходе"

  /:
    get:
      summary: "Информация о пользователе"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      tags:
        - "user"
      responses:
        "200":
          description: "Информация о пользователе"
        "500":
          description: "Пользователь не найден"

  /posts/:
    get:
      summary: "Получение списка постов"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      tags:
        - "posts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pagination:
                  type: object
                  properties:
                    pageIndex:
                      type: integer
                      example: 1
                    recordsPerPage:
                      type: integer
                      example: 10
      responses:
        "200":
          description: "Список постов"

    post:
      summary: "Создание нового поста"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      tags:
        - "posts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "This is a new post."
      responses:
        "200":
          description: "Пост успешно создан"
        "500":
          description: "Ошибка при создании поста"

  /posts/{id}/:
    put:
      summary: "Обновление поста"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "ID поста для обновления"
      tags:
        - "posts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "Updated post content"
      responses:
        "200":
          description: "Пост успешно обновлен"
        "400":
          description: "Неверный запрос"
        "500":
          description: "Ошибка сервера при обновлении поста"

    delete:
      summary: "Удаление поста"
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "ID поста для удаления"
      tags:
        - "posts"
      responses:
        "200":
          description: "Пост успешно удален"
        "400":
          description: "Неверный запрос"
        "500":
          description: "Ошибка сервера при удалении поста"